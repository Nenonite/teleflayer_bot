const { S_IFREG } = require('constants');
const { create } = require('domain');
const mineflayer = require('mineflayer')
const TeleBot = require('telebot');
var lastid = 0; //–∞–π–¥–∏ —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ª–æ–≥–∏ (—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–∂–µ —Å–∞–º, –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é, –ù–û —Ç–æ–≥–¥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞ 1 —Ä–∞–∑ –≤ —Ç–æ–º —á–∞—Ç–µ –∫—É–¥–∞ –≤–µ—Å—Ç–∏ –ª–æ–≥–∏)

var serverip = "IP —Å–µ—Ä–≤–µ—Ä–∞"; //–∞–π–ø–∏ —Å–µ—Ä–≤–µ—Ä–∞
var serverport = 25565;
var username = "Nickname";
var version = "1.12.2";
var autojoin = false;

function createMineBot() {

const bot = mineflayer.createBot({
	
	host: serverip,
	port: serverport,
	username: username,
	version: version          
})
let btc = 6000; //–∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–µ–π–∫ –∫—É—Ä—Å

let alphabet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
const requests = require('request'); 
const rq = require("prequest");
const { TIMEOUT } = require('dns');
const request = require('prequest')
var childProcess = require('child_process');
//–∞–ø–∏ –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ñ–µ–π–∫ –∫—É—Ä—Å)
setTimeout(async () => {
	const rq = await request('https://api.cryptonator.com/api/ticker/btc-usd');

	if(!rq.ticker) return;
	if(!rq.ticker.price) return;

	btc = Math.floor(Number(rq.ticker.price));
}, 5);
//–∫–æ–Ω–µ—Ü –∞–ø–∏ –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞

function time() { return new Date().toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');}
	const tbot = new TeleBot({token:"—Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —É BotFather",usePlugins: ['commandButton']}); //—Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∏ –æ–±—Ä–∞—Ç–Ω–æ
	
	const utils = {
		sp: (int) => {
			int = int.toString();
			return int.split('').reverse().join('').match(/[0-9]{1,3}/g).join('.').split('').reverse().join('');
		},
		rn: (int, fixed) => {
			if (int === null) return null;
			if (int === 0) return '0';
			fixed = (!fixed || fixed < 0) ? 0 : fixed;
			let b = (int).toPrecision(2).split('e'),
				  k = b.length === 1 ? 0 : Math.floor(Math.min(b[1].slice(1), 14) / 3),
				  c = k < 1 ? int.toFixed(0 + fixed) : (int / Math.pow(10, k * 3) ).toFixed(1 + fixed),
				  d = c < 0 ? c : Math.abs(c),
				  e = d + ['', '—Ç—ã—Å', '–º–ª–Ω', '–º–ª—Ä–¥', '—Ç—Ä–ª–Ω'][k];
	
				e = e.replace(/e/g, '');
				e = e.replace(/\+/g, '');
				e = e.replace(/Infinity/g, ' –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ');
	
			return e;
		},
		gi: (int) => {
			int = int.toString();
	
			let text = ``;
			for (let i = 0; i < int.length; i++)
			{
				text += `${int[i]}&#8419;`;
			}
	
			return text;
		},
		decl: (n, titles) => { return titles[(n % 10 === 1 && n % 100 !== 11) ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2] },
		random: (x, y) => {
			return y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x);
		},
		pick: (array) => {
			return array[utils.random(array.length - 1)];
		}
	}
	
	const fs = require('fs');
	const fetch = require('node-fetch');
	//—Ç—É—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã —Å —Ñ–æ—Ç–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
	const huy = "./image.jpg"
	const huy1 = "./image—Å.jpg"
	const huy2 = "./imagep.jpg"
	const huy3 = "./imagear.jpg"
	const huy4 = "./imagegoat.jpg"
	const huy5 = "./imageload.jpg"
	var test = 0;
	let url = "https://picsum.photos/512/512?random"
	
	async function download() {
	  const response = await fetch(url);
	  const buffer = await response.buffer();
	  fs.writeFile(`./image.jpg`, buffer, () => 
		console.log("saved image.jpg"));
	}
	
	async function download—Å() {
		const response = await fetch(url);
		const buffer = await response.buffer();
		fs.writeFile(`./image—Å.jpg`, buffer, () => 
		  console.log("saved image—Å.jpg"));
	}
	async function downloadp() {
		const response = await fetch(url);
		const buffer = await response.buffer();
		fs.writeFile(`./imagep.jpg`, buffer, () => 
		  console.log("saved imagep.jpg"));
	}
	
	async function downloadar() {
		const response = await fetch(url);
		const buffer = await response.buffer();
		fs.writeFile(`./imagear.jpg`, buffer, () => 
		  console.log("saved imagear.jpg"));
	}
	async function downloadgoat() {
		const response = await fetch(url);
		const buffer = await response.buffer();
		fs.writeFile(`./imagegoat.jpg`, buffer, () => 
		  console.log("saved imagegoat.jpg"));
	}
	async function downloadload() {
		const response = await fetch(url);
		const buffer = await response.buffer();
		fs.writeFile(`./imageload.jpg`, buffer, () => 
		  console.log("saved imageload.jpg"));
	}
	tbot.on('/sendpicture', (msg) => {lastid = msg.chat.id; url = "https://picsum.photos/512/512?random"; download(); tbot.sendMessage(msg.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ..."); tbot.sendPhoto(msg.chat.id, huy)});
	tbot.on('/sendcat', (msg) => {lastid = msg.chat.id; url = "https://thiscatdoesnotexist.com"; download—Å(); tbot.sendMessage(msg.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ..."); tbot.sendPhoto(msg.chat.id, huy1)});
	tbot.on('/people', (msg) => {lastid = msg.chat.id; url = "https://thispersondoesnotexist.com/image"; tbot.sendMessage(msg.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ..."); downloadp(); tbot.sendPhoto(msg.chat.id, huy2)});
	tbot.on('/sendart', (msg) => {lastid = msg.chat.id; url = "https://thisartworkdoesnotexist.com"; tbot.sendMessage(msg.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ..."); downloadar(); tbot.sendPhoto(msg.chat.id, huy3)});
	tbot.on('/sendgoat', (msg) => {lastid = msg.chat.id; url = "https://placegoat.com/720/512"; tbot.sendMessage(msg.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ..."); downloadgoat(); tbot.sendPhoto(msg.chat.id, huy4)});
	tbot.on(/^\/sendload (.+)$/, (msg, props)  => {lastid = msg.chat.id; url = props.match[1]; tbot.sendMessage(msg.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ..."); downloadload(); tbot.sendPhoto(msg.chat.id, huy5)});
	//–º–∏–Ω–∏ —Ä—É–ª–µ—Ç–∫–∞
	tbot.on(['/GadgetBox','/GadgetBox üì±','GadjetBox üì±'], (msg) => {
		let random1 = utils.pick(["üíª","üì±","üñ±","‚å®","üéô"]);
		let random2 = utils.pick(["üíª","üì±","üñ±","‚å®","üéô"]);
		let random3 = utils.pick(["üíª","üì±","üñ±","‚å®","üéô"]);
		let random4 = utils.pick(["üíª","üì±","üñ±","‚å®","üéô"]);
		const replyMarkup = tbot.inlineKeyboard([
			[
				// First row with command callback button
				tbot.inlineButton('GadgetBox', {callback: 'GadgetBox'})
			]
		]);
		let randcheck = random1+random2+random3+random4
		msg.reply.text(`${randcheck}`, { asReply: true });
		if(randcheck == "üíªüíªüíªüíª") return msg.reply.text(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–æ—É—Ç–±—É–∫!`, { asReply: true });
		if(randcheck == "üì±üì±üì±üì±") return msg.reply.text(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω!`, { asReply: true });
		if(randcheck == "üñ±üñ±üñ±üñ±") return msg.reply.text(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –º—ã—à–∫—É!`, { asReply: true });
		if(randcheck == "‚å®‚å®‚å®‚å®") return msg.reply.text(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!`, { asReply: true });
		if(randcheck == "üéôüéôüéôüéô") return msg.reply.text(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω!`, { asReply: true });
		lastid = msg.chat.id;
	});
	//üíª üì± üñ± üíª
	//GadjetBox üì±
	//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	tbot.on("/startbot", (msg) => {
		lastid = msg.chat.id
		tbot.sendMessage(lastid,"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
		bot.quit()
		tbot.stop()
		setTimeout(createMineBot, 2000)
	});
	tbot.on("/settings", (msg) => {
		lastid = msg.chat.id;
		tbot.sendMessage(lastid, `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: –ê–π–ø–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${serverip} –ü–æ—Ä—Ç: ${serverport} –ù–∏–∫: ${username} –í–µ—Ä—Å–∏—è: ${version}`);
	})
	tbot.on(/^\/setip (.+)$/, (msg, props) => { const text = props.match[1]; 
		lastid = msg.chat.id;
		serverip = text;
		tbot.sendMessage(lastid, `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–π–ø–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${serverip}`)

	});

	tbot.on(/^\/setport (.+)$/, (msg, props) => { const text = props.match[1]; 
		lastid = msg.chat.id;
		serverport = text;
		serverport = Number(serverport)
		tbot.sendMessage(lastid, `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${serverport}`)
	});

	tbot.on(/^\/setnick (.+)$/, (msg, props) => { const text = props.match[1]; 
		lastid = msg.chat.id;
		username = text;

		tbot.sendMessage(lastid, `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫: ${username}`)
	});

	tbot.on(/^\/setversion (.+)$/, (msg, props) => { const text = props.match[1]; 
		lastid = msg.chat.id;
		version = text;

		tbot.sendMessage(lastid, `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ωa –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã: ${version}`)
	});

	tbot.on('edit', (msg) => { return bot.chat(`${ msg.from.first_name }: ${msg.text} (–∏–∑–º–µ–Ω–µ–Ω–æ)`) });
	tbot.on(['/start', '/hello', '/help', '–°—Ç–∞—Ä—Ç'], (msg) => {lastid = msg.chat.id; msg.reply.text('–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã: /sendpicture - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ, /sendcat - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∞, /eval [–∫–æ–º–∞–Ω–¥–∞], /people - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞, /testbuttons - —Ç–µ—Å—Ç –∫–Ω–æ–ø–æ–∫, /action, /sendart - –∞—Ä—Ç');});
	//–ø–æ–ª–µ–∑–Ω–∞—è –ù–û –æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ —á–µ—Ä–µ–∑ –Ω–µ–µ –º–æ–≥—É—Ç –≤–∑–ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∏ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –ª—é–¥–µ–π
	tbot.on(/^\/eval (.+)$/, (msg, props) => { const text = props.match[1]; 
	lastid = msg.chat.id;
	try {
	const result = eval(props.match[1])
	
	
	if(typeof(result) === 'string')
	{
	return msg.reply.text(`—Å—Ç—Ä–æ–∫–∞: ${result}`);
	} else if(typeof(result) === 'number')
	{
	return msg.reply.text(`—á–∏—Å–ª–æ: ${result}`);
	} else {
	return msg.reply.text(`${typeof(result)}: ${JSON.stringify(result, null, '„ÄÄ\t')}`);
	}
	} catch (e) {
	console.error(e);
	return msg.reply.text(`–æ—à–∏–±–∫–∞:
	${e.toString()}`);
	}  
	});
	tbot.on('/testbuttons', msg => {
	
		// Inline keyboard markup
		const replyMarkup = tbot.inlineKeyboard([
			[
				// First row with command callback button
				tbot.inlineButton('–ø–æ—Ö—É–π', {callback: 'pohuy'})
			],
			[
				// Second row with regular command button
				tbot.inlineButton('—Ö—É–π', {callback: 'huy'})
			]
		]);
	
		// Send message with keyboard markup
		lastid = msg.chat.id;
		return tbot.sendMessage(msg.chat.id, '—Å–∞–º —Ç–∞–∫–∞—è', {replyMarkup});
	
	});
	tbot.on('callbackQuery', (msg) => {
	
		console.log('callbackQuery data:', msg.data);
		if(msg.data == "huy") {
			tbot.sendMessage(lastid, "—Ö—É–π")
		}
		if(msg.data == "pohuy") {
			tbot.sendMessage(lastid, "—Å–∞–º –ø–æ—Ö—É–π")
		}
		tbot.answerCallbackQuery(msg.id);
	});
	tbot.on(/^\/action (.+)$/, (msg, props) => { const text = props.match[1]; 
		tbot.sendAction(msg.chat.id, text);
	});
	// tbot.on(/(—Ç–∞–∫–∞—è\s)?—Å–∞–º*/, (msg) => {
	//	return tbot.sendMessage(msg.chat.id,`${utils.pick(["–°–∞–º —Ç–∞–∫–∞—è","–ù–µ —Å–∞–º!!","–°–ê–ú –¢–ê–ö–û–ô!!!","–º–æ–∂–µ—Ç —Ç—ã?"])}`)
	//}); 
	tbot.on(/^\/mchat (.+)$/, (msg, props) => { const text = props.match[1]; 
	   lastid = msg.chat.id;
	   bot.chat(`${text}`)
	});
	tbot.on(/^\/login (.+)$/, (msg, props) => { const text = props.match[1]; 
		lastid = msg.chat.id;
		bot.chat(`/l ${text}`)
	 });
	//–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç –±–æ—Ç
	bot.on('chat', function (username, message) {
		tbot.sendMessage(lastid, `<${username}> ${message}`)
		  console.log("<"+username+"> "+message)
		  const command = message.split(' ')
		  if (username === bot.username) return
		  if(message.toLowerCase() == "!—Å–∞–º —Ç–∞–∫–æ–π") bot.chat(`${utils.pick(["–°–ê–ú –¢–ê–ö–û–ô","–Ω–µ —Ç–∏","–º–æ–∂–µ—Ç —Ç—ã?","–°–∞–º","—Å–∞–º—Ü–∞","—Å–∞–º —Ç–∞–∫–∞—è","..."])}`)
		  if(message.toLowerCase() == "!—Å–∞–º") bot.chat(`${utils.pick(["–°–ê–ú –¢–ê–ö–û–ô","–Ω–µ —Ç–∏","–º–æ–∂–µ—Ç —Ç—ã?","–°–∞–º","—Å–∞–º—Ü–∞","—Å–∞–º —Ç–∞–∫–∞—è","..."])}`)
		  if(message.toLowerCase() == "!–Ω–µ —Ç–∏") bot.chat(`${utils.pick(["–°–ê–ú –¢–ê–ö–û–ô","–Ω–µ —Ç–∏","–º–æ–∂–µ—Ç —Ç—ã?","–°–∞–º","—Å–∞–º—Ü–∞","—Å–∞–º —Ç–∞–∫–∞—è","..."])}`)
		  if(message.toLowerCase() == "!–º–æ–∂–µ—Ç —Ç—ã") bot.chat(`${utils.pick(["–°–ê–ú –¢–ê–ö–û–ô","–Ω–µ —Ç–∏","–º–æ–∂–µ—Ç —Ç—ã?","–°–∞–º","—Å–∞–º—Ü–∞","—Å–∞–º —Ç–∞–∫–∞—è","..."])}`)
		  if(message.toLowerCase() == "!–º–æ–∂–µ—Ç —Ç—ã?") bot.chat(`${utils.pick(["–°–ê–ú –¢–ê–ö–û–ô","–Ω–µ —Ç–∏","–º–æ–∂–µ—Ç —Ç—ã?","–°–∞–º","—Å–∞–º—Ü–∞","—Å–∞–º —Ç–∞–∫–∞—è","..."])}`)
		  if(message.toLowerCase() == "!—Å–∞–º—Ü–∞") bot.chat(`${utils.pick(["–°–ê–ú –¢–ê–ö–û–ô","–Ω–µ —Ç–∏","–º–æ–∂–µ—Ç —Ç—ã?","–°–∞–º","—Å–∞–º—Ü–∞","—Å–∞–º —Ç–∞–∫–∞—è","..."])}`)
		  if(message.toLowerCase() == "!–∞") bot.chat("–ë")
		  if(message.toLowerCase() == "!—Ä–∞–Ω–¥–æ–º—Ç–µ–∫—Å—Ç") bot.chat(`${utils.pick(["–°–ê–ú –¢–ê–ö–û–ô","–Ω–µ —Ç–∏","–º–æ–∂–µ—Ç —Ç—ã?","–°–∞–º","—Å–∞–º—Ü–∞","–•—É–π –ø–∏–∑–¥–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–∞ (—Å) –ö–æ—Å—Ç—è","—É—É—É –ø–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ","–°–ü–ò–î–†–ê–ù –ü–û –ë–û–¢–£ –ü–û–ì–ù–ê–õ–ò"])}`)
		  if(message.toLowerCase() == "!–∫–∞–∫–æ–µ —â–∞—Å –≤—Ä–µ–º—è") bot.chat(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ: ${time()}`) 
		  if(message.toLowerCase() == "!–∫—É—Ä—Å–±–∏—Ç–∫–∞") bot.chat(`–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc} –¥–æ–ª–ª–∞—Ä–æ–≤`)
		  if(message.toLowerCase() == "!—Å–ø–∏–¥—Ä–∞–Ω –ø–æ –∫–∏–∫—É –ø–æ–≥–Ω–∞–ª–∏") bot.quit()
		  if(message.toLowerCase() == "!–∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è") bot.chat('–¢–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è: ' + bot.time.timeOfDay)
		  if(message.toLowerCase() == "!—Ç—ã —Ç—É—Ç") bot.chat(`${ utils.pick(['–î–∞, —è —Ç—É—Ç.', '–Ø –∑–¥–µ—Å—å.', '–ß—Ç–æ –Ω–∞–¥–æ?', '–£–≥—É', '–ù—É –¥–∞, —Ç—É—Ç.', '–¢—É—Ç, —Ç—É—Ç.','–ù–µ—Ç, —è –Ω–µ —Ç—É—Ç.','–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç –ø–æ–¥ –∏–º–µ–Ω–µ–º –¢—É—Ç.','–°–∞–º —Ç–∞–∫–∞—è','–ò–¥–∏ –Ω–∞—Ñ–∏–≥','–ù—É –¥–∞, –∞ —á—Ç–æ?','–î–∞–π –º–Ω–µ –ø–æ–∫—É–ø–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ','–ù–µ—Ç, —è –Ω–µ —Ç—É—Ç, —è —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤–∏–Ω–¥—ã...'])}`)
		  if(message.toLowerCase() == "!–º–æ–∏–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã") bot.chat(`–Ø –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ${bot.entity.position}`)
		  if(message.toLowerCase() == "!–ø–æ–º–æ—â—å") bot.chat("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: !—Ä–∞–Ω–¥–æ–º—Ç–µ–∫—Å—Ç - —Ç–µ–∫—Å—Ç !—Ç—ã —Ç—É—Ç - —Ç–æ–∂–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç !–∫—É—Ä—Å–±–∏—Ç–∫–∞ - –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö !–∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–µ !–∫–∞–∫–æ–µ —â–∞—Å –≤—Ä–µ–º—è - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ !eval [—Ç–µ–∫—Å—Ç] - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ JavaScript !saytext [—Ç–µ–∫—Å—Ç] - –±–æ—Ç –Ω–∞–ø–∏—à–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç")
		  if(message.toLowerCase() == "—Ç–µ—Å—Ç –≥—É–≥–ª–∞") {
			requests('http://www.artgame.rf.gd', function (error, response, body) {
				bot.chat(`error: ${error}`); // Print the error if one occurred ()
				bot.chat(`statusCode: ${response} ${response.statusCode}`); // Print the response status code if a response was received
				console.log('body:', body);
				bot.chat(`body: ${body}`); // Print the HTML for the Google homepage.
			  });
		  }
		
		switch (true) {
			case /!saytext/.test(message):
				if(/!saytext/i.test(message)) message = message.replace(/!saytext/i, '').trim();
			  bot.chat(`${message}`)
			  break
			case /!eval/.test(message):
				try {
					let fullargs = ""
					if(/!eval/i.test(message)) message = message.replace(/!eval/i, '').trim();
				message = message.replace(/^\S+\s/, "")
		
				console.log(message)
		
				const result = eval(message)
		
		
				if(typeof(result) === 'string')
					{
					return bot.chat(`—Å—Ç—Ä–æ–∫–∞: ${result}`);
					} else if(typeof(result) === 'number')
					{
					return bot.chat(`—á–∏—Å–ª–æ: ${result}`);
					} else {
					return bot.chat(`${typeof(result)}: ${JSON.stringify(result, null, '„ÄÄ\t')}`);
					}
				} catch (e) {
						console.error(e);
						return bot.chat(`–æ—à–∏–±–∫–∞: ${e.toString()}`);
					}  
					
			case /!cmd/.test(message):
				try {
					let fullargs = ""
					if(/!eval/i.test(message)) message = message.replace(/!eval/i, '').trim();
				message = message.replace(/^\S+\s/, "")
		
				console.log(message)
		
				const result = eval("childProcess.execSync(message).toString();")
		
		
				if(typeof(result) === 'string')
					{
					return bot.chat(`—Å—Ç—Ä–æ–∫–∞: ${result}`);
					} else if(typeof(result) === 'number')
					{
					return bot.chat(`—á–∏—Å–ª–æ: ${result}`);
					} else {
					return bot.chat(`${typeof(result)}: ${JSON.stringify(result, null, '„ÄÄ\t')}`);
					}
				} catch (e) {
						console.error(e);
						return bot.chat(`–æ—à–∏–±–∫–∞: ${e.toString()}`);
					}  
				 }
		
		})
		// Log errors and kick reasons:
		bot.on('playerJoined', (player) => {
			console.log('\x1b[33m%s\x1b[0m', `${player.username} joined the game`);  
			tbot.sendMessage(lastid, `${player.username} joined the game`)
		})
		bot.on('playerLeft', (player) => {
		  console.log('\x1b[33m%s\x1b[0m', `${player.username} left the game`);  
		  tbot.sendMessage(lastid, `${player.username} left the game`)
		})
		bot.on('kicked', (reason, loggedIn) => {
			console.log(reason, loggedIn);
			var a = reason;
			tbot.sendMessage(`–ö–∏–∫–Ω—É–ª–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${a.text} (–µ—Å–ª–∏ –ø—É—Å—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏–∂–µ)`);
			tbot.sendMessage(`–ö–∏–∫–Ω—É–ª–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${a.with}`);
			werwerwer();
		})
		bot.on('end', werwerwer)
		bot.on('error', err => console.log(err))
		
		
		function werwerwer() {
			
		
				// Inline keyboard markup
				const replyMarkup = tbot.inlineKeyboard([
					[
						// First row with command callback button
						tbot.inlineButton('–í–∫–ª—é—á–∏—Ç—å', {callback: 'startbot'})
					],
					[
						// Second row with regular command button
						tbot.inlineButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å', {callback: 'setup'})
					]
				]);
		
			
			tbot.sendMessage(lastid,"–ë–æ—Ç –≤—ã–∫–ª—é—á–∏–ª—Å—è, —á–æ –¥–µ–ª–∞—Ç—å? –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ?", {replyMarkup})
			tbot.on('callbackQuery', (msg) => {
		
				console.log('callbackQuery data:', msg.data);
				if(msg.data == "startbot") {
					
					tbot.sendMessage(lastid,"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
					bot.quit()
					tbot.stop()
					setTimeout(createMineBot, 2000)
				}
				if(msg.data == "setup") {
					tbot.sendMessage(lastid, `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: –ê–π–ø–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${serverip} –ü–æ—Ä—Ç: ${serverport} –ù–∏–∫: ${username} –í–µ—Ä—Å–∏—è: ${version}`)
				}
				tbot.answerCallbackQuery(msg.id);
			});
		}
		
		tbot.on('sticker', (msg) => {
			lastid = msg.chat.id;
			bot.chat(`${ msg.from.first_name }: –°—Ç–∏–∫–µ—Ä`)
			
		});
		tbot.on('photo', (msg) => {
			lastid = msg.chat.id;
			bot.chat(`${ msg.from.first_name }: –§–æ—Ç–æ`)
			
		});  
		tbot.on('video', (msg) => {
			lastid = msg.chat.id;
			bot.chat(`${ msg.from.first_name }: –í–∏–¥–µ–æ`)
			
		});  
	
	tbot.on('text', (msg) => bot.chat(`${ msg.from.first_name }: ${msg.text}`));
	tbot.start()
}
createMineBot()

